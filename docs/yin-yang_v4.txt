Programando mi primera Demo en QL – fascículo IV, colisiones y puntuaciones

Viene del hilo: https://retrowiki.es/viewtopic.php?f=98&t=200040286

Finaliza esta serie de artículos, y en esta ocasión veremos cómo controlar las colisiones y las puntuaciones para dejar nuestra demo terminada.

[size=150][b]El Ying y el Yang[/b][/size]

En la línea 500 de esta versión, he inicializado los marcadores a 200. Este valor se corresponde con el número de casillas del tablero del color de cada bola. En un tablero de 20×20, cuya área inicial de cada bola es de 10×20, el número de casillas es de 200, luego el número de puntos es 200.

Cada vez que una bola se adentre en la zona de la bola contraria, robará una casilla y rebotará para volver a su zona del tablero. En ese momento, el marcador de la bola en cuestión se incrementará en 1, y el de la otra bola se reducirá en 1.

¡Este es el delicado equilibrio entre las fuerzas del Yin y del Yang!

[size=150][b]La versión IV[/b][/size]

Hay pocos cambios en esta versión.

[code]100 REMark Yin & Yang v.4
110 REMark GPL, 2024, Badaman
120 REMark Colisiones y puntuaciones
130 :
140 CLEAR: RANDOMISE: ch%=3: ch2%=4
150 dev$="mdv1_": prg$="yinyang": v$="v4"
160 :
170 INICIO: PANTALLA
180 REPeat prg
190   n%=1-n%
200   BORRA(n%): CALCULA(n%)
210   MUEVE(n%): PRUEBA(n%)
220   IF KEYROW(1)=8: EXIT prg: REMark ESC
230 END REPeat prg
240 FIN: STOP
250 :
260 DEFine PROCedure sa
270   REMark Salva los cambios
280   file$ = dev$&prg$&"_"&v$&"_bas"
290   DELETE file$ : SAVE file$
300 END DEFine sa
310 :
320 DEFine PROCedure INICIO
330   REMark Inicializacion del programa
340   an%=20-1: al%=20-1
350   DIM tablero%(an%, al%): DIM b%(1,5)
360   f$=" ": b$="O": REMark b$=CHR$(226)
370   FOR i=0 TO 19
380     FOR j= 0 TO  9: tablero%(i,j)=0
390     FOR j=10 TO 19: tablero%(i,j)=1
400   END FOR i
410   REMark Bolas, posiciones 'x' e 'y'
420   b%(0,0)=RND( 0 TO 18) : REMark x1
430   b%(0,1)=RND( 0 TO  9) : REMark y1
440   b%(1,0)=RND( 1 TO 19) : REMark x2
450   b%(1,1)=RND(10 TO 19) : REMark y2
460   REMark Desplazamientos 'dx' y 'dy'
470   b%(0,2)= 1: b%(0,3)= 1: REMark d1
480   b%(1,2)=-1: b%(1,3)=-1: REMark d2
490   REMark Ambas puntuaciones
500   b%(0,4)=200 : b%(1,4)=200
510   REMark Colores
520   b%(0,5)=1 : b%(1,5)=6
530   n%=1 : REMark Bola alterna
540 END DEFine INICIO
550 :
560 DEFine PROCedure FIN
570   REMark Finalizacion del programa
580   CLOSE #ch%: CLOSE #ch2%: MODE 4
590 END DEFine FIN
600 :
610 DEFine PROCedure PANTALLA
620   REMark Presentacion de pantalla
630   MODE 8
640   REMark Dibuja tablero
650   OPEN   #ch%,scr_512x256a0x0
660   OPEN   #ch2%,scr_324x225a97x18
670   PAPER  #ch%,5,7: CLS #ch%
680   PAPER  #ch2%,0: CLS #ch2%
690   WINDOW #ch%,324,202,94,16
700   WINDOW #ch2%,324,22,94,218
710   PAPER  #ch%,b%(0,5): CLS #ch%
720   PAPER  #ch2%,3: CLS #ch2%
730   BORDER #ch%,1,3: BORDER #ch2%,1
740   BLOCK  #ch%,160,200,160,0,b%(1,5)
750   CSIZE  #ch%,3,0: CSIZE #ch2%,0,1
760   INK    #ch2%,4: CURSOR #ch2%,99,0
770   PRINT  #ch2%,"YIN & YANG"
780   INK    #ch2%,7
790   REMark Posicion inicial de pelotas
800   FOR i=0,1: MUEVE(i): MARCADOR(i)
810 END DEFine PANTALLA
820 :
830 DEFine PROCedure MARCADOR(bola%)
840   REMark Actualiza el marcador
850   CURSOR #ch2%,283*bola%,0
860   PRINT  #ch2%,CERO$(b%(bola%,4))
870 END DEFine MARCADOR
880 :
890 DEFine FuNction CERO$(valor)
900   REMark Rellena con ceros, max. 999
910   txt$=valor: ln%=LEN(txt$)
920   RETurn FILL$("0",3-ln%)&txt$
930 END DEFine CERO$
940 :
950 DEFine PROCedure BORRA(bola%)
960   REMark Borra la bola
970   LOCal x%, y%, c1%
980   x%=b%(bola%,0) : y%=b%(bola%,1)
990   c1%=b%(bola%,5): PAPER #ch%,c1%
1000   AT #ch%,x%,y%: PRINT #ch%,f$
1010 END DEFine BORRA
1020 :
1030 DEFine PROCedure CALCULA(bola%)
1040   REMark Calcula un movimiento
1050   LOCal x%, y%, dx%, dy%
1060   x%=b%(bola%,0): dx%=b%(bola%,2)
1070   y%=b%(bola%,1): dy%=b%(bola%,3)
1080   x%=x%+dx%: b%(bola%,0)=x%
1090   y%=y%+dy%: b%(bola%,1)=y%
1100 END DEFine CALCULA
1110 :
1120 DEFine PROCedure MUEVE(bola%)
1130   REMark Mueve la bola
1140   LOCal x%, y%, c1%, c2%
1150   x%=b%(bola%,0): y%=b%(bola%,1)
1160   c1%=b%(bola%,5): c2%=b%(1-bola%,5)
1170   PAPER #ch%,c1%: INK #ch%,c2%
1180   AT #ch%,x%,y% : PRINT #ch%,b$
1190 END DEFine MUEVE
1200 :
1210 DEFine PROCedure PRUEBA(bola%)
1220   REMark Comprueba colisiones
1230   LOCal x%, y%, dx%, dy%
1240   x%=b%(bola%,0): dx%=b%(bola%,2)
1250   y%=b%(bola%,1): dy%=b%(bola%,3)
1260   :
1270   IF tablero%(x%, y%)=1-bola% THEN
1280     IF y%-dy%>1 AND y%-dy%<18 THEN
1290       dy%=-dy%: b%(bola%,3)=dy%
1300       tablero%(x%, y%)=bola%
1310       b%(bola%,4)=b%(bola%,4)+1
1320       b%(1-bola%,4)=b%(1-bola%,4)-1
1330       FOR i=0,1: MARCADOR(i)
1340     END IF
1350   END IF
1360   :
1370   IF x%=0 OR x%=19: b%(bola%,2)=-dx%
1380   IF y%=0 OR y%=19: b%(bola%,3)=-dy%
1390 END DEFine PRUEBA[/code]

[size=150][b]Rebotes[/b][/size]

En estas pocas líneas de código reside la «magia» de la demo:

[code]1270   IF tablero%(x%, y%)=1-bola% THEN
1280     IF y%-dy%>1 AND y%-dy%<18 THEN
1290       dy%=-dy%: b%(bola%,3)=dy%
1300       tablero%(x%, y%)=bola%
1310       b%(bola%,4)=b%(bola%,4)+1
1320       b%(1-bola%,4)=b%(1-bola%,4)-1
1330       FOR i=0,1: MARCADOR(i)
1340     END IF
1350   END IF[/code]

Dentro del procedimiento PRUEBA(), en la línea 1270, compruebo si la bola se encuentra en una posición del tablero que corresponde a la bola contraria (1-bola%).

Si es así toca hacer rebote para volver a la zona de la bola, como si nos hubiésemos topado con una pared, y rebotásemos, pero puede que, al volver, nos topemos con otra zona del contrario que nos haga rebotar de nuevo. Puede que esto ocurra cerca de los bordes del tablero, y nos salgamos del mismo. Para evitarlo, hago una segunda comprobación.

En la línea 1280 me aseguro de que, si hago un cambio de dirección en Y, este cambio no hará que me salga del tablero, y para ello me aseguro de que el resultado del cambio de dirección dejará la bola más allá de la columna 1 y más acá de la columna 18, de otra forma no haré rebote, y evitaré salirme si la bola choca y me devuleve al borde del tablero.

Por supuesto, ambas comprobaciones pueden hacerse en un solo IF, aunándolas.

Si todo fue bien, en la línea 1290, cambio la dirección de dy% y lo guardo en la matriz b%().

Luego asigno la casilla del tablero a la bola que se adentró en ella en la línea 1300.

En las líneas 1310 y 1320 aumento el marcador de la bola en cuestión y decremento el marcador de la otra bola, respectivamente.

Y en la línea 1330 actualizo ambos marcadores en la pantalla mediante un bucle y la llamada al procedimiento MARCADOR().

Ya sólo queda ejecutar la demo.

[size=150][b]Repasando[/b][/size]

La demo que hemos construido se ha hecho pensando no tanto en la optimización del código como en su forma y la aplicación de buenas prácticas.

Primeramente definimos la estructura del programa, incluyendo los procedimientos básicos y el bucle principal. Luego, con la planificación de cómo iba a funcionar el programa, determinamos las variables que usaríamos y dimos forma al tablero en pantalla.

Teniendo el tablero y las variables disponibles, el siguiente paso era hacer que las bolas de la demo se moviesen libremente por el tablero sin salirse. Y finalmente hemos conseguido gestionar las colisiones de las bolas con las áreas del contrario y actualizar los marcadores.

En esta serie de «fascículos» pues se han puesto las bases de la construcción de programas en SuperBASIC. Con esta experiencia, y la documentación de lenguaje, no será dificil aventurarse a construir otras demos o juegos o programas… Ya tienes por dónde empezar con este ejemplo.

Espero que, esta serie os anime a crear nuevas aplicaciones para el QL 40 años después.

[size=150][b]Ejercicio[/b][/size]

Si ejecutas el programa, verás algo curioso. Dado que estamos usando posiciones absolutas de caracteres en el tablero, llega un momento en que se produce un equilibrio inalterable entre ambas bolas. El marcador se estabiliza, o sube y baja un punto todo el tiempo.

Además verás que se genera un damero en el tablero. Esto también tiene como origen la forma en que las bolas se mueven por él.

¿Te animas a cambiar la forma en que se mueven las bolas en la demo, usando saltos en pixeles en vez de en caracteres? Esto cambiará ciertas estructuras de la demo y te permitirá crear rebotes basándote en qué porcentaje de la bola toca una celda del contrario, pudiendo determinar como será el rebote. Revisa el código de la demo [url=https://github.com/vnglst/pong-wars]PongWars[/url] en la que se basa esta serie de fascículos.

[size=150][b]Hagamos un juego[/b][/size]

Cuando tengas hecho el ejercicio anterior, ¡podrás convertir esta demo en un juego!

Vamos a crear dos paletas, como en el pong, pero estas no se encontrarán a los lados, sino en el medio, en la frontera central de su territorio, cara a cara con el enemigo. La paleta de la bola 1 estará en la posición vertical 9, y la paleta de la otra bola en la posición vertical 10.

Como en el pong, las paletas se moverán sólo verticalmente, y en ellas podrás hacer rebotar la bola del contrario, parando su avance sobre tu zona del tablero y devolviéndola a su zona. Igualmente puedes ayudar a tu bola a adentrarse más en la zona del contrario haciéndola rebotar sobre tu paleta. Y, como en el juego original, en función de en que parte de la paleta rebote la bola, esta saldrá disparada con un ángulo determinado y una velocidad determinada. Las bolas pueden rebotar por ambas caras de cada paleta.

Gana la partida el primero que consigua que su bola se adentre en la zona del contrario hasta tocar su pared vertical, es decir, que la bola 1 llegue a la posición horizontal 19 o que la bola 2 llegue a la posición horizontal 0. Puedes pintar estas paredes con otro color si lo deseas.

Pon cuidado en todo el desarrollo, y ¡comparte tu juego!

[b][size=150]Enlaces recomendados[/size][/b]

    [url=https://sinclairql.speccy.org/manuales/sqlgu.htm]Manual del QL en español[/url]
    [url=https://sinclairql.speccy.org/manuales/tk2/index.htm]Manual de Toolkit II en español[/url]
    [url=https://github.com/JavGuerra/Sinclair-QL-YinYang.git]Código en GitHub, repo Sinclair-QL-YinYang[/url]

Esta entrada se publicó primero en [url=https://sinclairqles.wordpress.com/2024/03/30/programando-mi-primera-demo-en-ql-fasciculo-iv-colisiones-y-puntuaciones/]QBLog[/url]