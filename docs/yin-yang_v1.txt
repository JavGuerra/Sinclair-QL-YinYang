Programando mi primera Demo en QL – fascículo I, los preparativos

Parece que, más allá de los sospechosos habituales de la comunidad de QL, hay gente interesada en conocer un poco más sobre el QL, y en programar en él. Varios juegos en SuperBASIC han visto la luz recientemente en los foros de RetroWiki,. Esta colección de pocos artículos que inicio hoy pretende dar a conocer las particularidades del SuperBASIC mediante un ejemplo práctico, la realización de una pequeña demo.

Para aprovechar estas entregas es necesario que tengas conocimientos básicos de programación y sobre el Sinclair QL.

Me quedé hipnotizado con este ejemplo de programación, y me propuse portarlo al QL. A medida que lo iba desarrollando, más potencial le veía como medio para aprender programación.

El código en JavaScript y el video puede verse aquí: https://github.com/vnglst/pong-wars

[img]https://sinclairqles.files.wordpress.com/2024/03/yin-yang_ql.png[/img]

Este es el aspecto que tendrá la demo en el QL.

[b][size=150]SuperBASIC[/size][/b]

Del potencial del lenguaje del QL ya se ha hablado mucho y bien. La característica que más destaca de él es que permite realizar programación estructurada mediante el uso de Procedimientos y Funciones. Estos se definen mediante una sentencia DEFine PROCedure o DEFine FuNtion. Por ejemplo, si necesitamos llamar al código que aumenta un contador ne un programa, podemos hacer un GO TO o GO SUB o usar un procedimiento o función, que sería la forma correcta de hacerlo en SuperBASIC:

[code]100 DEFine PROCedure incremento
110   contador = contador + 1
120 END DEFine incremento
130 contador = 1
140 incremento
150 PRINT contador[/code]

Como vemos en la línea 140, es suficiente con poner el nombre del procedimienrto para que se ejecute el código entre DEFine y END DEFine. No importa en la línea que esté el procedimiento. SuperBASIC lo encontrará y usará. El resultado obtenido será 2.

A un procedimiento o función podemos pasdarle parámetros, como veremos más adelante, igual que en cualquier lenguaje actual.

Esto que es tan obvio conlleva una forma de hacer programas distinta, modular, en la que el código puede trocearse para hacerlo más operativo y limpio, aunque esto implica, generalmente, un mayor número de líneas.

[size=150][b]La estructura[/b][/size]

Pues bien, partiendo de esta premisa, veamos cómo sería el «esqueleto» de nuestro programa demo:

[code]100 REMark nombre del programa, version
110 REMark licencia, anyo, autores
120 REMark Estructura basica
130 :
140 CLEAR: REMark 'mdv1_yinyang_v1_bas'
150 dev$="mdv1_": prg$="yinyang": v$="v1"
160 :
170 INICIO: PANTALLA
180 REPeat prg
190   PRINT "Pulsa ESC": REMark Resto del codigo del programa aquí
200   IF KEYROW(1)=8: EXIT prg: REMark ESC
210 END REPeat prg
220 FIN: STOP
230 :
240 DEFine PROCedure sa
250   REMark Salva los cambios
260   REMark Nota: crear un fichero con el
270   REMark nombre correcto antes de usar
280   REMark y con cada nueva version
290   file$=dev$&prg$&"_"&v$&"_bas"
300   DELETE file$: SAVE file$
310 END DEFine sa
320 :
330 DEFine PROCedure INICIO
340   REMark Inicializacion del programa
350 END DEFine INICIO
360 :
370 DEFine PROCedure FIN
380   REMark Finalizacion del programa
390 END DEFine FIN
400 :
410 DEFine PROCedure PANTALLA
420   REMark Presentacion de pantalla
430 END DEFine PANTALLA
440 :
450 REMark Resto de FNs y PROCs aqui[/code]

Podría decirse que esta es una estructura genérica que podría usarse con cualquier programa en SuperBASIC que hagamos. Vamos a estudiarla.

[b][size=150]Vamos por partes[/size][/b]

Como se aprecia, las lineas estan numeradas, y cada línea puede tener una o varias sentencias separadas por dos puntos. Incluso podemos tener líneas con dos puntos y nada más. Esto se usa para separar visualmente el código.

Los comentarios en el programa se incluyen con la sentencia REMark. Podemos tener comentarios que ocupen una línea o al final de una línea, tras una o varias sentencias en esa línea.

En la línea 140 vemos un CLEAR. Esto se usa para limpiar el valor de las variables del BASIC. A continuación va un comentario con la ruta de nuestro programa, un ejemplo de lo que comentaba antes sobre los REM.

En la siguiente línea, mediante variables, podemos determinar el dispositivo, el nombre del programa y la versión del mismo. Esto será útil para el procedimiento llamada sa.

[b][size=150]El procedimiento sa[/size][/b]

De la línea 240 a la 310 se define el procedimiento «sa» que sirve para salvar los cambios de nuestro programa a medida que programamos.

Este tipo de procedimientos es muy común en el mundo QL, y ayudan a no tener que escribir los comandos para borrar y volver a guardar el programa que vamos haciendo. SuperBASIC permite usar los procedimientos en el sistema como si de nuevos comandos se tratase, así pues, una vez hayamos ejecutado el programa, aunque paremos su ejecución, los procedimientos pueden ser invocados desde la línea de comandos.

Con sólo escribir sa en la línea de comandos, se guardará una versión actualizada de nuestro programa. Eso sí, las variables dev$, prg$ y v$ (varaibles que contienen texto y por eso terminan en $) deben tener los valores correctos, pues en la línea 290 se compone la ruta y el nombre dle fichero que usaremos.

dev$ tiene como valor mdv1_, que corresponde a un dispositivo de microdrive. Podemos usar otros como flp1_ para disqueteras, win1_ para discos, ram1_ para discos RAM… y de cada tipo de dispositivo puede haber 8, por ejemplo, de microdrives puede haber mdv1_, mdv2_ … mdv8_

En la línea 290 se usa el caracter & para concatenar o unir estas cadenas que se guardarán en la variable file$

Cuando estés programando, verás lo útil que resulta el nuevo procedimiento/comando sa.

[b][size=150]Nuestro programa[/size][/b]

El programa como tal está entre las líneas 170 y 220:

[code]170 INICIO: PANTALLA
180 REPeat prg
190   PRINT "Pulsa ESC": REMark Resto del codigo del programa aquí
200   IF KEYROW(1)=8: EXIT prg: REMark ESC
210 END REPeat prg
220 FIN: STOP[/code]

[b][size=150]Procedimiento INICIO[/size][/b]

Este es un procedimiento que contendrá la inicialización de varialbes del programa. En la siguiente versión del programa veremos qué variables necesitaremos y cómo se definen. Por ahora dejamos el procedimiento creado entre las líneas 330 y 350.

[b][size=150]Procedimiento PANTALLA[/size][/b]

Este procedimiento será el encargado de dibujar la pantalla, de mostrar la interfaz de la demo. Está entre las líneas 410 a 430. Ahora no hace realmente nada, igual que INICIO, pero en la siguiente versión le daremos contenido.

[b][size=150]Procedimiento FIN[/size][/b]

Este procedimiento definido entre las líneas 370 a 390 nos permitirá cerrar el programa de forma adecuada. Mismo caso que en los procedimientos anteriores. Lo veremos en acción en la siguiente versión del programa.

[size=150][b]STOP[/b][/size]

Esta instrucción sirve para parar la ejecución del programa, como puede suponerse. Realmente no es necesario usarla en este programa, pero ayuda a delimitar visualmente donde termina el código.

Si bien debajo de la línea 220 hay definiciones de Procedimientos, estos no se ejecutarán a no ser que se llamen o invoquen en el programa.

[b][size=150]REPeat prg[/size][/b]

Repeat es un bucle que tiene asociado un identificador, en este caso «prg», que nos da la oprtunidad de ejecutar el contenido de las líneas entre REPeat y END REPeat hasta que se cumpla una condición de salida. Cuando esto ocurre, se sale del bucle mediante EXIT, como puede vertse en la línea 200.

El bucle se repite hasta que pulsemos la tecla ESC, y entonces salede él y continua la ejecución con FIN y luego STOP.

KEYROW es una instrucción que lee el teclado y devuelve un valor numérico correspondiente a la tecla pulsada. En este caso KEYROW lee la fila 1 de la cuadrícula del teclado y comprueba si esta devuelve el valor 8, que corresponde a la tecla ESC. Consulta la guía dle usuario para más información y uso de KEYROW.

Una particularidad del SuperBASIC es que, si ponemos las instrucciones que deben ejecutarse tras un IF en una sola línea, no necesitamos hacer uso de THEN ni tampoco de END IF, com ohago en la línea 200.

En la línea 190 incluiríamos el resto de programa y los procedimientos a los que deseemos invocar en las siguientes versiones de esta demo.

[b][size=150]Usando el programa[/size][/b]

El programa realmente no hace nada. Una vez ejecutado, espera todo el tiempo a que pulsemos la tecla ESC para salir.

Podemos copiar el código y guardarlo en nuestor disco como un fichero de texto plano, en la ruta «mdv1_yinyang_v1_bas»

Si vamos a cambiar la ubicación del fichero, debemos cambiar también el valor de la variable dev$ editando el código, para poder utilizar correctamente el comando sa. Un ejemplo de edición de código desde QL. Introducir este comando, y una vez editado, pulsar ENTER.

[code]EDIT 150[/code]

Aparecerá la línea en la línea de comandos para poder editarla. Luego se guardarán los cambios con ENTER.

Si tienes el Toolkit II o TK2 para los amigos, puedes hacer uso del comando ED, que te permite editar el programa en la ventana donde se lista. Lee el manual de TK2.

Si ejecutaste el programa, cuando hayas hecho los cambios, podrás usar el comando sa con tranquilidad para guardarlo.

Haciendo uso del comando RENUM las líneas se renumerarán automáticamente de 10 en 10, empezando por la línea 100, dejando espacio para nuevas lineas.

Recuerda que, para borrar, debes usar la combinación de teclas CTRL + tecla izquierda o CTRL + tecla derecha.

[b][size=150]Y la próxima semana…[/size][/b]

No te pierdas la próxima entrega en la que definiremos las variables de la demo, la pantalla y el marcador de puntuación.

Mientras tanto, ¿qué te parece probar todo lo visto aquí con una pequeña aplicación hecha por ti?

[b][size=150]Ejercicio[/size][/b]

Te propongo que, usando esta estructura, crees un menú en pantalla que muestre tres opciones, de tal forma que al pulsar 1, haciendo uso de PRINT, la aplicación escriba, la frase "Buenos días". Si pulsamos 2, se debe imprimir "Buenas tardes" y si pulsamos 3, debe decir "Buenas noches". Usa ESC para salir.

Cada una de las tres opciones puede ser invocada mediante un procedimiento llamado OPCION1, OPCION2 y OPCION3 respectivamente. Dentro de estos procedimientos estarían los PRINT que muestran los mensajes.

Las pulsaciones de las teclas se comprobarán mediante KEYROW (ver manual) haciendo uso de los correspondientes IF, de la misma forma que en la línea 200, pero en vez de usar EXIT invocaremos al procedimiento que corresponda.

[b][size=150]Enlaces recomendados[/size][/b]

    [url=https://sinclairql.speccy.org/manuales/sqlgu.htm]Manual del QL en español[/url]
    [url=https://sinclairql.speccy.org/manuales/tk2/index.htm]Manual de Toolkit II en español[/url]
    [url=https://github.com/JavGuerra/Sinclair-QL-YinYang.git]Código en GitHub, repo Sinclair-QL-YinYang[/url]

[url=https://sinclairqles.wordpress.com/2024/03/16/programando-mi-primera-demo-en-ql-fasciculo-i-los-preparativos/]Esta entrada se publicó primero en QBlog[/url]

[size=150][b]Siguiente entrega[/b][/size]

https://retrowiki.es/viewtopic.php?f=98&t=200040267